// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConstants.proto

package com.orange.network.game.protocol.constants;

public final class GameConstantsProtos {
  private GameConstantsProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum GameCommandType
      implements com.google.protobuf.ProtocolMessageEnum {
    JOIN_GAME_REQUEST(0, 1),
    JOIN_GAME_RESPONSE(1, 2),
    START_GAME_REQUEST(2, 3),
    START_GAME_RESPONSE(3, 4),
    QUIT_GAME_REQUEST(4, 5),
    QUIT_GAME_RESPONSE(5, 6),
    SEND_DRAW_DATA_REQUEST(6, 11),
    SEND_DRAW_DATA_RESPONSE(7, 12),
    CLEAN_DRAW_REQUEST(8, 13),
    CLEAN_DRAW_RESPONSE(9, 14),
    CHAT_REQUEST(10, 15),
    CHAT_RESPONSE(11, 16),
    COMPLETE_GAME_REQUEST(12, 17),
    COMPLETE_GAME_RESPONSE(13, 18),
    FORCE_USER_QUIT_REQUEST(14, 19),
    FORCE_USER_QUIT_RESPONSE(15, 20),
    FACETIME_CHAT_REQUEST(16, 81),
    FACETIME_CHAT_RESPONSE(17, 82),
    FACETIME_CHAT_START(18, 83),
    KEEP_ALIVE_REQUEST(19, 91),
    KEEP_ALIVE_RESPONSE(20, 92),
    GET_ROOMS_REQUEST(21, 601),
    GET_ROOMS_RESPONSE(22, 602),
    CREATE_ROOM_REQUEST(23, 603),
    CREATE_ROOM_RESPONSE(24, 604),
    ENTER_ROOM_REQUEST(25, 605),
    ENTER_ROOM_RESPONSE(26, 606),
    REGISTER_ROOMS_NOTIFICATION_REQUEST(27, 607),
    REGISTER_ROOMS_NOTIFICATION_RESPONSE(28, 608),
    UNREGISTER_ROOMS_NOTIFICATION_REQUEST(29, 609),
    UNREGISTER_ROOMS_NOTIFICATION_RESPONSE(30, 610),
    SERACH_ROOM_REQUEST(31, 611),
    SEARCH_ROOM_RESPONSE(32, 612),
    CALL_DICE_REQUEST(33, 621),
    CALL_DICE_RESPONSE(34, 622),
    OPEN_DICE_REQUEST(35, 623),
    OPEN_DICE_RESPONSE(36, 624),
    BET_DICE_REQUEST(37, 625),
    BET_DICE_RESPONSE(38, 626),
    USE_ITEM_REQUEST(39, 631),
    USE_ITEM_RESPONSE(40, 632),
    BET_REQUEST(41, 801),
    BET_RESPONSE(42, 802),
    CHECK_CARD_REQUEST(43, 803),
    CHECK_CARD_RESPONSE(44, 804),
    FOLD_CARD_REQUEST(45, 807),
    FOLD_CARD_RESPONSE(46, 808),
    SHOW_CARD_REQUEST(47, 809),
    SHOW_CARD_RESPONSE(48, 810),
    COMPARE_CARD_REQUEST(49, 811),
    COMPARE_CARD_RESPONSE(50, 812),
    CHANGE_CARD_REQUEST(51, 813),
    CHANGE_CARD_RESPONSE(52, 814),
    TIMEOUT_SETTING_REQUEST(53, 815),
    TIMEOUT_SETTING_RESPONSE(54, 816),
    USER_JOIN_NOTIFICATION_REQUEST(55, 51),
    USER_JOIN_NOTIFICATION_RESPONSE(56, 52),
    USER_QUIT_NOTIFICATION_REQUEST(57, 53),
    USER_QUIT_NOTIFICATION_RESPONSE(58, 54),
    GAME_START_NOTIFICATION_REQUEST(59, 55),
    GAME_START_NOTIFICATION_RESPONSE(60, 56),
    HOST_CHANGE_NOTIFICATION_REQUEST(61, 61),
    HOST_CHANGE_NOTIFICATION_RESPONSE(62, 62),
    NEW_DRAW_DATA_NOTIFICATION_REQUEST(63, 71),
    NEW_DRAW_DATA_NOTIFICATION_RESPONSE(64, 72),
    CLEAN_DRAW_NOTIFICATION_REQUEST(65, 73),
    CLEAN_DRAW_NOTIFICATION_RESPONSE(66, 74),
    CHAT_NOTIFICATION_REQUEST(67, 75),
    CHAT_NOTIFICATION_RESPONSE(68, 76),
    GAME_TURN_COMPLETE_NOTIFICATION_REQUEST(69, 77),
    GAME_TURN_COMPLETE_NOTIFICATION_RESPONSE(70, 78),
    LOCAL_CHANNEL_DISCONNECT(71, 201),
    LOCAL_FINISH_GAME(72, 203),
    LOCAL_JOIN_GAME(73, 204),
    LOCAL_GAME_TURN_COMPLETE(74, 205),
    LOCAL_USER_TIME_OUT(75, 206),
    LOCAL_NEW_USER_JOIN(76, 301),
    LOCAL_USER_QUIT(77, 302),
    LOCAL_DRAW_USER_QUIT(78, 303),
    LOCAL_ALL_OTHER_USER_QUIT(79, 304),
    LOCAL_OTHER_USER_QUIT(80, 305),
    LOCAL_TIME_OUT(81, 306),
    LOCAL_START_GAME(82, 307),
    LOCAL_ALL_USER_QUIT(83, 308),
    LOCAL_ALL_USER_GUESS(84, 309),
    LOCAL_DRAW_USER_CHAT(85, 310),
    LOCAL_PLAY_USER_QUIT(86, 311),
    LOCAL_CALL_DICE(87, 312),
    LOCAL_OPEN_DICE(88, 313),
    LOCAL_USER_SKIP(89, 314),
    LOCAL_ALL_USER_BET(90, 315),
    LOCAL_BET(91, 316),
    LOCAL_CHECK_CARD(92, 317),
    LOCAL_FOLD_CARD(93, 318),
    LOCAL_SHOW_CARD(94, 319),
    LOCAL_COMPARE_CARD(95, 320),
    LOCAL_NOT_CURRENT_TURN_FOLD_CARD(96, 321),
    LOCAL_CHANGE_CARD(97, 322),
    LOCAL_WORD_PICKED(98, 323),
    ROOM_NOTIFICATION_REQUEST(99, 701),
    ROOM_NOTIFICATION_RESPONSE(100, 702),
    ROLL_DICE_BEGIN_NOTIFICATION_REQUEST(101, 711),
    ROLL_DICE_BEGIN_NOTIFICATION_RESPONSE(102, 712),
    ROLL_DICE_END_NOTIFICATION_REQUEST(103, 713),
    ROLL_DICE_END_NOTIFICATION_RESPONSE(104, 714),
    NEXT_PLAYER_START_NOTIFICATION_REQUEST(105, 715),
    NEXT_PLAYER_START_NOTIFICATION_RESPONSE(106, 716),
    USER_DICE_NOTIFICATION(107, 717),
    GAME_OVER_NOTIFICATION_REQUEST(108, 731),
    GAME_OVER_NOTIFICATION_RESPONSE(109, 732),
    ;
    
    public static final int JOIN_GAME_REQUEST_VALUE = 1;
    public static final int JOIN_GAME_RESPONSE_VALUE = 2;
    public static final int START_GAME_REQUEST_VALUE = 3;
    public static final int START_GAME_RESPONSE_VALUE = 4;
    public static final int QUIT_GAME_REQUEST_VALUE = 5;
    public static final int QUIT_GAME_RESPONSE_VALUE = 6;
    public static final int SEND_DRAW_DATA_REQUEST_VALUE = 11;
    public static final int SEND_DRAW_DATA_RESPONSE_VALUE = 12;
    public static final int CLEAN_DRAW_REQUEST_VALUE = 13;
    public static final int CLEAN_DRAW_RESPONSE_VALUE = 14;
    public static final int CHAT_REQUEST_VALUE = 15;
    public static final int CHAT_RESPONSE_VALUE = 16;
    public static final int COMPLETE_GAME_REQUEST_VALUE = 17;
    public static final int COMPLETE_GAME_RESPONSE_VALUE = 18;
    public static final int FORCE_USER_QUIT_REQUEST_VALUE = 19;
    public static final int FORCE_USER_QUIT_RESPONSE_VALUE = 20;
    public static final int FACETIME_CHAT_REQUEST_VALUE = 81;
    public static final int FACETIME_CHAT_RESPONSE_VALUE = 82;
    public static final int FACETIME_CHAT_START_VALUE = 83;
    public static final int KEEP_ALIVE_REQUEST_VALUE = 91;
    public static final int KEEP_ALIVE_RESPONSE_VALUE = 92;
    public static final int GET_ROOMS_REQUEST_VALUE = 601;
    public static final int GET_ROOMS_RESPONSE_VALUE = 602;
    public static final int CREATE_ROOM_REQUEST_VALUE = 603;
    public static final int CREATE_ROOM_RESPONSE_VALUE = 604;
    public static final int ENTER_ROOM_REQUEST_VALUE = 605;
    public static final int ENTER_ROOM_RESPONSE_VALUE = 606;
    public static final int REGISTER_ROOMS_NOTIFICATION_REQUEST_VALUE = 607;
    public static final int REGISTER_ROOMS_NOTIFICATION_RESPONSE_VALUE = 608;
    public static final int UNREGISTER_ROOMS_NOTIFICATION_REQUEST_VALUE = 609;
    public static final int UNREGISTER_ROOMS_NOTIFICATION_RESPONSE_VALUE = 610;
    public static final int SERACH_ROOM_REQUEST_VALUE = 611;
    public static final int SEARCH_ROOM_RESPONSE_VALUE = 612;
    public static final int CALL_DICE_REQUEST_VALUE = 621;
    public static final int CALL_DICE_RESPONSE_VALUE = 622;
    public static final int OPEN_DICE_REQUEST_VALUE = 623;
    public static final int OPEN_DICE_RESPONSE_VALUE = 624;
    public static final int BET_DICE_REQUEST_VALUE = 625;
    public static final int BET_DICE_RESPONSE_VALUE = 626;
    public static final int USE_ITEM_REQUEST_VALUE = 631;
    public static final int USE_ITEM_RESPONSE_VALUE = 632;
    public static final int BET_REQUEST_VALUE = 801;
    public static final int BET_RESPONSE_VALUE = 802;
    public static final int CHECK_CARD_REQUEST_VALUE = 803;
    public static final int CHECK_CARD_RESPONSE_VALUE = 804;
    public static final int FOLD_CARD_REQUEST_VALUE = 807;
    public static final int FOLD_CARD_RESPONSE_VALUE = 808;
    public static final int SHOW_CARD_REQUEST_VALUE = 809;
    public static final int SHOW_CARD_RESPONSE_VALUE = 810;
    public static final int COMPARE_CARD_REQUEST_VALUE = 811;
    public static final int COMPARE_CARD_RESPONSE_VALUE = 812;
    public static final int CHANGE_CARD_REQUEST_VALUE = 813;
    public static final int CHANGE_CARD_RESPONSE_VALUE = 814;
    public static final int TIMEOUT_SETTING_REQUEST_VALUE = 815;
    public static final int TIMEOUT_SETTING_RESPONSE_VALUE = 816;
    public static final int USER_JOIN_NOTIFICATION_REQUEST_VALUE = 51;
    public static final int USER_JOIN_NOTIFICATION_RESPONSE_VALUE = 52;
    public static final int USER_QUIT_NOTIFICATION_REQUEST_VALUE = 53;
    public static final int USER_QUIT_NOTIFICATION_RESPONSE_VALUE = 54;
    public static final int GAME_START_NOTIFICATION_REQUEST_VALUE = 55;
    public static final int GAME_START_NOTIFICATION_RESPONSE_VALUE = 56;
    public static final int HOST_CHANGE_NOTIFICATION_REQUEST_VALUE = 61;
    public static final int HOST_CHANGE_NOTIFICATION_RESPONSE_VALUE = 62;
    public static final int NEW_DRAW_DATA_NOTIFICATION_REQUEST_VALUE = 71;
    public static final int NEW_DRAW_DATA_NOTIFICATION_RESPONSE_VALUE = 72;
    public static final int CLEAN_DRAW_NOTIFICATION_REQUEST_VALUE = 73;
    public static final int CLEAN_DRAW_NOTIFICATION_RESPONSE_VALUE = 74;
    public static final int CHAT_NOTIFICATION_REQUEST_VALUE = 75;
    public static final int CHAT_NOTIFICATION_RESPONSE_VALUE = 76;
    public static final int GAME_TURN_COMPLETE_NOTIFICATION_REQUEST_VALUE = 77;
    public static final int GAME_TURN_COMPLETE_NOTIFICATION_RESPONSE_VALUE = 78;
    public static final int LOCAL_CHANNEL_DISCONNECT_VALUE = 201;
    public static final int LOCAL_FINISH_GAME_VALUE = 203;
    public static final int LOCAL_JOIN_GAME_VALUE = 204;
    public static final int LOCAL_GAME_TURN_COMPLETE_VALUE = 205;
    public static final int LOCAL_USER_TIME_OUT_VALUE = 206;
    public static final int LOCAL_NEW_USER_JOIN_VALUE = 301;
    public static final int LOCAL_USER_QUIT_VALUE = 302;
    public static final int LOCAL_DRAW_USER_QUIT_VALUE = 303;
    public static final int LOCAL_ALL_OTHER_USER_QUIT_VALUE = 304;
    public static final int LOCAL_OTHER_USER_QUIT_VALUE = 305;
    public static final int LOCAL_TIME_OUT_VALUE = 306;
    public static final int LOCAL_START_GAME_VALUE = 307;
    public static final int LOCAL_ALL_USER_QUIT_VALUE = 308;
    public static final int LOCAL_ALL_USER_GUESS_VALUE = 309;
    public static final int LOCAL_DRAW_USER_CHAT_VALUE = 310;
    public static final int LOCAL_PLAY_USER_QUIT_VALUE = 311;
    public static final int LOCAL_CALL_DICE_VALUE = 312;
    public static final int LOCAL_OPEN_DICE_VALUE = 313;
    public static final int LOCAL_USER_SKIP_VALUE = 314;
    public static final int LOCAL_ALL_USER_BET_VALUE = 315;
    public static final int LOCAL_BET_VALUE = 316;
    public static final int LOCAL_CHECK_CARD_VALUE = 317;
    public static final int LOCAL_FOLD_CARD_VALUE = 318;
    public static final int LOCAL_SHOW_CARD_VALUE = 319;
    public static final int LOCAL_COMPARE_CARD_VALUE = 320;
    public static final int LOCAL_NOT_CURRENT_TURN_FOLD_CARD_VALUE = 321;
    public static final int LOCAL_CHANGE_CARD_VALUE = 322;
    public static final int LOCAL_WORD_PICKED_VALUE = 323;
    public static final int ROOM_NOTIFICATION_REQUEST_VALUE = 701;
    public static final int ROOM_NOTIFICATION_RESPONSE_VALUE = 702;
    public static final int ROLL_DICE_BEGIN_NOTIFICATION_REQUEST_VALUE = 711;
    public static final int ROLL_DICE_BEGIN_NOTIFICATION_RESPONSE_VALUE = 712;
    public static final int ROLL_DICE_END_NOTIFICATION_REQUEST_VALUE = 713;
    public static final int ROLL_DICE_END_NOTIFICATION_RESPONSE_VALUE = 714;
    public static final int NEXT_PLAYER_START_NOTIFICATION_REQUEST_VALUE = 715;
    public static final int NEXT_PLAYER_START_NOTIFICATION_RESPONSE_VALUE = 716;
    public static final int USER_DICE_NOTIFICATION_VALUE = 717;
    public static final int GAME_OVER_NOTIFICATION_REQUEST_VALUE = 731;
    public static final int GAME_OVER_NOTIFICATION_RESPONSE_VALUE = 732;
    
    
    public final int getNumber() { return value; }
    
    public static GameCommandType valueOf(int value) {
      switch (value) {
        case 1: return JOIN_GAME_REQUEST;
        case 2: return JOIN_GAME_RESPONSE;
        case 3: return START_GAME_REQUEST;
        case 4: return START_GAME_RESPONSE;
        case 5: return QUIT_GAME_REQUEST;
        case 6: return QUIT_GAME_RESPONSE;
        case 11: return SEND_DRAW_DATA_REQUEST;
        case 12: return SEND_DRAW_DATA_RESPONSE;
        case 13: return CLEAN_DRAW_REQUEST;
        case 14: return CLEAN_DRAW_RESPONSE;
        case 15: return CHAT_REQUEST;
        case 16: return CHAT_RESPONSE;
        case 17: return COMPLETE_GAME_REQUEST;
        case 18: return COMPLETE_GAME_RESPONSE;
        case 19: return FORCE_USER_QUIT_REQUEST;
        case 20: return FORCE_USER_QUIT_RESPONSE;
        case 81: return FACETIME_CHAT_REQUEST;
        case 82: return FACETIME_CHAT_RESPONSE;
        case 83: return FACETIME_CHAT_START;
        case 91: return KEEP_ALIVE_REQUEST;
        case 92: return KEEP_ALIVE_RESPONSE;
        case 601: return GET_ROOMS_REQUEST;
        case 602: return GET_ROOMS_RESPONSE;
        case 603: return CREATE_ROOM_REQUEST;
        case 604: return CREATE_ROOM_RESPONSE;
        case 605: return ENTER_ROOM_REQUEST;
        case 606: return ENTER_ROOM_RESPONSE;
        case 607: return REGISTER_ROOMS_NOTIFICATION_REQUEST;
        case 608: return REGISTER_ROOMS_NOTIFICATION_RESPONSE;
        case 609: return UNREGISTER_ROOMS_NOTIFICATION_REQUEST;
        case 610: return UNREGISTER_ROOMS_NOTIFICATION_RESPONSE;
        case 611: return SERACH_ROOM_REQUEST;
        case 612: return SEARCH_ROOM_RESPONSE;
        case 621: return CALL_DICE_REQUEST;
        case 622: return CALL_DICE_RESPONSE;
        case 623: return OPEN_DICE_REQUEST;
        case 624: return OPEN_DICE_RESPONSE;
        case 625: return BET_DICE_REQUEST;
        case 626: return BET_DICE_RESPONSE;
        case 631: return USE_ITEM_REQUEST;
        case 632: return USE_ITEM_RESPONSE;
        case 801: return BET_REQUEST;
        case 802: return BET_RESPONSE;
        case 803: return CHECK_CARD_REQUEST;
        case 804: return CHECK_CARD_RESPONSE;
        case 807: return FOLD_CARD_REQUEST;
        case 808: return FOLD_CARD_RESPONSE;
        case 809: return SHOW_CARD_REQUEST;
        case 810: return SHOW_CARD_RESPONSE;
        case 811: return COMPARE_CARD_REQUEST;
        case 812: return COMPARE_CARD_RESPONSE;
        case 813: return CHANGE_CARD_REQUEST;
        case 814: return CHANGE_CARD_RESPONSE;
        case 815: return TIMEOUT_SETTING_REQUEST;
        case 816: return TIMEOUT_SETTING_RESPONSE;
        case 51: return USER_JOIN_NOTIFICATION_REQUEST;
        case 52: return USER_JOIN_NOTIFICATION_RESPONSE;
        case 53: return USER_QUIT_NOTIFICATION_REQUEST;
        case 54: return USER_QUIT_NOTIFICATION_RESPONSE;
        case 55: return GAME_START_NOTIFICATION_REQUEST;
        case 56: return GAME_START_NOTIFICATION_RESPONSE;
        case 61: return HOST_CHANGE_NOTIFICATION_REQUEST;
        case 62: return HOST_CHANGE_NOTIFICATION_RESPONSE;
        case 71: return NEW_DRAW_DATA_NOTIFICATION_REQUEST;
        case 72: return NEW_DRAW_DATA_NOTIFICATION_RESPONSE;
        case 73: return CLEAN_DRAW_NOTIFICATION_REQUEST;
        case 74: return CLEAN_DRAW_NOTIFICATION_RESPONSE;
        case 75: return CHAT_NOTIFICATION_REQUEST;
        case 76: return CHAT_NOTIFICATION_RESPONSE;
        case 77: return GAME_TURN_COMPLETE_NOTIFICATION_REQUEST;
        case 78: return GAME_TURN_COMPLETE_NOTIFICATION_RESPONSE;
        case 201: return LOCAL_CHANNEL_DISCONNECT;
        case 203: return LOCAL_FINISH_GAME;
        case 204: return LOCAL_JOIN_GAME;
        case 205: return LOCAL_GAME_TURN_COMPLETE;
        case 206: return LOCAL_USER_TIME_OUT;
        case 301: return LOCAL_NEW_USER_JOIN;
        case 302: return LOCAL_USER_QUIT;
        case 303: return LOCAL_DRAW_USER_QUIT;
        case 304: return LOCAL_ALL_OTHER_USER_QUIT;
        case 305: return LOCAL_OTHER_USER_QUIT;
        case 306: return LOCAL_TIME_OUT;
        case 307: return LOCAL_START_GAME;
        case 308: return LOCAL_ALL_USER_QUIT;
        case 309: return LOCAL_ALL_USER_GUESS;
        case 310: return LOCAL_DRAW_USER_CHAT;
        case 311: return LOCAL_PLAY_USER_QUIT;
        case 312: return LOCAL_CALL_DICE;
        case 313: return LOCAL_OPEN_DICE;
        case 314: return LOCAL_USER_SKIP;
        case 315: return LOCAL_ALL_USER_BET;
        case 316: return LOCAL_BET;
        case 317: return LOCAL_CHECK_CARD;
        case 318: return LOCAL_FOLD_CARD;
        case 319: return LOCAL_SHOW_CARD;
        case 320: return LOCAL_COMPARE_CARD;
        case 321: return LOCAL_NOT_CURRENT_TURN_FOLD_CARD;
        case 322: return LOCAL_CHANGE_CARD;
        case 323: return LOCAL_WORD_PICKED;
        case 701: return ROOM_NOTIFICATION_REQUEST;
        case 702: return ROOM_NOTIFICATION_RESPONSE;
        case 711: return ROLL_DICE_BEGIN_NOTIFICATION_REQUEST;
        case 712: return ROLL_DICE_BEGIN_NOTIFICATION_RESPONSE;
        case 713: return ROLL_DICE_END_NOTIFICATION_REQUEST;
        case 714: return ROLL_DICE_END_NOTIFICATION_RESPONSE;
        case 715: return NEXT_PLAYER_START_NOTIFICATION_REQUEST;
        case 716: return NEXT_PLAYER_START_NOTIFICATION_RESPONSE;
        case 717: return USER_DICE_NOTIFICATION;
        case 731: return GAME_OVER_NOTIFICATION_REQUEST;
        case 732: return GAME_OVER_NOTIFICATION_RESPONSE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameCommandType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameCommandType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameCommandType>() {
            public GameCommandType findValueByNumber(int number) {
              return GameCommandType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final GameCommandType[] VALUES = {
      JOIN_GAME_REQUEST, JOIN_GAME_RESPONSE, START_GAME_REQUEST, START_GAME_RESPONSE, QUIT_GAME_REQUEST, QUIT_GAME_RESPONSE, SEND_DRAW_DATA_REQUEST, SEND_DRAW_DATA_RESPONSE, CLEAN_DRAW_REQUEST, CLEAN_DRAW_RESPONSE, CHAT_REQUEST, CHAT_RESPONSE, COMPLETE_GAME_REQUEST, COMPLETE_GAME_RESPONSE, FORCE_USER_QUIT_REQUEST, FORCE_USER_QUIT_RESPONSE, FACETIME_CHAT_REQUEST, FACETIME_CHAT_RESPONSE, FACETIME_CHAT_START, KEEP_ALIVE_REQUEST, KEEP_ALIVE_RESPONSE, GET_ROOMS_REQUEST, GET_ROOMS_RESPONSE, CREATE_ROOM_REQUEST, CREATE_ROOM_RESPONSE, ENTER_ROOM_REQUEST, ENTER_ROOM_RESPONSE, REGISTER_ROOMS_NOTIFICATION_REQUEST, REGISTER_ROOMS_NOTIFICATION_RESPONSE, UNREGISTER_ROOMS_NOTIFICATION_REQUEST, UNREGISTER_ROOMS_NOTIFICATION_RESPONSE, SERACH_ROOM_REQUEST, SEARCH_ROOM_RESPONSE, CALL_DICE_REQUEST, CALL_DICE_RESPONSE, OPEN_DICE_REQUEST, OPEN_DICE_RESPONSE, BET_DICE_REQUEST, BET_DICE_RESPONSE, USE_ITEM_REQUEST, USE_ITEM_RESPONSE, BET_REQUEST, BET_RESPONSE, CHECK_CARD_REQUEST, CHECK_CARD_RESPONSE, FOLD_CARD_REQUEST, FOLD_CARD_RESPONSE, SHOW_CARD_REQUEST, SHOW_CARD_RESPONSE, COMPARE_CARD_REQUEST, COMPARE_CARD_RESPONSE, CHANGE_CARD_REQUEST, CHANGE_CARD_RESPONSE, TIMEOUT_SETTING_REQUEST, TIMEOUT_SETTING_RESPONSE, USER_JOIN_NOTIFICATION_REQUEST, USER_JOIN_NOTIFICATION_RESPONSE, USER_QUIT_NOTIFICATION_REQUEST, USER_QUIT_NOTIFICATION_RESPONSE, GAME_START_NOTIFICATION_REQUEST, GAME_START_NOTIFICATION_RESPONSE, HOST_CHANGE_NOTIFICATION_REQUEST, HOST_CHANGE_NOTIFICATION_RESPONSE, NEW_DRAW_DATA_NOTIFICATION_REQUEST, NEW_DRAW_DATA_NOTIFICATION_RESPONSE, CLEAN_DRAW_NOTIFICATION_REQUEST, CLEAN_DRAW_NOTIFICATION_RESPONSE, CHAT_NOTIFICATION_REQUEST, CHAT_NOTIFICATION_RESPONSE, GAME_TURN_COMPLETE_NOTIFICATION_REQUEST, GAME_TURN_COMPLETE_NOTIFICATION_RESPONSE, LOCAL_CHANNEL_DISCONNECT, LOCAL_FINISH_GAME, LOCAL_JOIN_GAME, LOCAL_GAME_TURN_COMPLETE, LOCAL_USER_TIME_OUT, LOCAL_NEW_USER_JOIN, LOCAL_USER_QUIT, LOCAL_DRAW_USER_QUIT, LOCAL_ALL_OTHER_USER_QUIT, LOCAL_OTHER_USER_QUIT, LOCAL_TIME_OUT, LOCAL_START_GAME, LOCAL_ALL_USER_QUIT, LOCAL_ALL_USER_GUESS, LOCAL_DRAW_USER_CHAT, LOCAL_PLAY_USER_QUIT, LOCAL_CALL_DICE, LOCAL_OPEN_DICE, LOCAL_USER_SKIP, LOCAL_ALL_USER_BET, LOCAL_BET, LOCAL_CHECK_CARD, LOCAL_FOLD_CARD, LOCAL_SHOW_CARD, LOCAL_COMPARE_CARD, LOCAL_NOT_CURRENT_TURN_FOLD_CARD, LOCAL_CHANGE_CARD, LOCAL_WORD_PICKED, ROOM_NOTIFICATION_REQUEST, ROOM_NOTIFICATION_RESPONSE, ROLL_DICE_BEGIN_NOTIFICATION_REQUEST, ROLL_DICE_BEGIN_NOTIFICATION_RESPONSE, ROLL_DICE_END_NOTIFICATION_REQUEST, ROLL_DICE_END_NOTIFICATION_RESPONSE, NEXT_PLAYER_START_NOTIFICATION_REQUEST, NEXT_PLAYER_START_NOTIFICATION_RESPONSE, USER_DICE_NOTIFICATION, GAME_OVER_NOTIFICATION_REQUEST, GAME_OVER_NOTIFICATION_RESPONSE, 
    };
    
    public static GameCommandType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private GameCommandType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.GameCommandType)
  }
  
  public enum GameResultCode
      implements com.google.protobuf.ProtocolMessageEnum {
    SUCCESS(0, 0),
    ERROR_JOIN_GAME(1, 1),
    ERROR_USERID_NULL(2, 100),
    ERROR_USER_CANNOT_START_GAME(3, 101),
    ERROR_USER_NOT_IN_SESSION(4, 102),
    ERROR_USER_NOT_CURRENT_PLAY_USER(5, 103),
    ERROR_CURRENT_PLAY_USER_NULL(6, 104),
    ERROR_NO_SESSION_ID(7, 200),
    ERROR_NEXT_STATE_NOT_FOUND(8, 201),
    ERROR_SESSIONID_NULL(9, 202),
    ERROR_SESSION_ALREADY_START(10, 203),
    ERROR_SESSION_NOT_START(11, 204),
    ERROR_NO_SESSION_AVAILABLE(12, 205),
    ERROR_SESSIONID_FULL(13, 206),
    ERROR_SESSION_NAME_DUPLICATED(14, 207),
    ERROR_NO_DRAW_DATA(15, 301),
    ERROR_DICE_ALREADY_OPEN(16, 401),
    ERROR_USER_ALREADY_CALL_DICE(17, 402),
    ERROR_DICE_OPEN_SELF(18, 403),
    ERROR_CANNOT_BET(19, 451),
    ERROR_ALREADY_CHECK_CARD(20, 452),
    ERROR_CANNOT_CHECK_CARD(21, 453),
    ERROR_ALREADY_FOLD_CARD(22, 454),
    ERROR_CANNOT_FOLD_CARD(23, 455),
    ERROR_ALREADY_SHOW_CARD(24, 456),
    ERROR_CANNOT_SHOW_CARD(25, 457),
    ERROR_ALREADY_COMPARE_CARD(26, 458),
    ERROR_CANNOT_COMPARE_CARD(27, 459),
    ERROR_EXCESS_CHAHGE_QUOTA(29, 460),
    ERROR_UNKNOWN_ITEM(30, 501),
    ERROR_EXCESS_TIME_LIMIT(31, 502),
    ERROR_SYSTEM_HANDLER_NOT_FOUND(32, 910),
    ERROR_SYSTEM_EXCEPTION(33, 911),
    ERROR_SYSTEM_SECURITY_CHECK(34, 912),
    ;
    
    public static final GameResultCode ERROR_ALREADY_CHANGE_CARD_THIS_ROUND = ERROR_ALREADY_COMPARE_CARD;
    public static final int SUCCESS_VALUE = 0;
    public static final int ERROR_JOIN_GAME_VALUE = 1;
    public static final int ERROR_USERID_NULL_VALUE = 100;
    public static final int ERROR_USER_CANNOT_START_GAME_VALUE = 101;
    public static final int ERROR_USER_NOT_IN_SESSION_VALUE = 102;
    public static final int ERROR_USER_NOT_CURRENT_PLAY_USER_VALUE = 103;
    public static final int ERROR_CURRENT_PLAY_USER_NULL_VALUE = 104;
    public static final int ERROR_NO_SESSION_ID_VALUE = 200;
    public static final int ERROR_NEXT_STATE_NOT_FOUND_VALUE = 201;
    public static final int ERROR_SESSIONID_NULL_VALUE = 202;
    public static final int ERROR_SESSION_ALREADY_START_VALUE = 203;
    public static final int ERROR_SESSION_NOT_START_VALUE = 204;
    public static final int ERROR_NO_SESSION_AVAILABLE_VALUE = 205;
    public static final int ERROR_SESSIONID_FULL_VALUE = 206;
    public static final int ERROR_SESSION_NAME_DUPLICATED_VALUE = 207;
    public static final int ERROR_NO_DRAW_DATA_VALUE = 301;
    public static final int ERROR_DICE_ALREADY_OPEN_VALUE = 401;
    public static final int ERROR_USER_ALREADY_CALL_DICE_VALUE = 402;
    public static final int ERROR_DICE_OPEN_SELF_VALUE = 403;
    public static final int ERROR_CANNOT_BET_VALUE = 451;
    public static final int ERROR_ALREADY_CHECK_CARD_VALUE = 452;
    public static final int ERROR_CANNOT_CHECK_CARD_VALUE = 453;
    public static final int ERROR_ALREADY_FOLD_CARD_VALUE = 454;
    public static final int ERROR_CANNOT_FOLD_CARD_VALUE = 455;
    public static final int ERROR_ALREADY_SHOW_CARD_VALUE = 456;
    public static final int ERROR_CANNOT_SHOW_CARD_VALUE = 457;
    public static final int ERROR_ALREADY_COMPARE_CARD_VALUE = 458;
    public static final int ERROR_CANNOT_COMPARE_CARD_VALUE = 459;
    public static final int ERROR_ALREADY_CHANGE_CARD_THIS_ROUND_VALUE = 458;
    public static final int ERROR_EXCESS_CHAHGE_QUOTA_VALUE = 460;
    public static final int ERROR_UNKNOWN_ITEM_VALUE = 501;
    public static final int ERROR_EXCESS_TIME_LIMIT_VALUE = 502;
    public static final int ERROR_SYSTEM_HANDLER_NOT_FOUND_VALUE = 910;
    public static final int ERROR_SYSTEM_EXCEPTION_VALUE = 911;
    public static final int ERROR_SYSTEM_SECURITY_CHECK_VALUE = 912;
    
    
    public final int getNumber() { return value; }
    
    public static GameResultCode valueOf(int value) {
      switch (value) {
        case 0: return SUCCESS;
        case 1: return ERROR_JOIN_GAME;
        case 100: return ERROR_USERID_NULL;
        case 101: return ERROR_USER_CANNOT_START_GAME;
        case 102: return ERROR_USER_NOT_IN_SESSION;
        case 103: return ERROR_USER_NOT_CURRENT_PLAY_USER;
        case 104: return ERROR_CURRENT_PLAY_USER_NULL;
        case 200: return ERROR_NO_SESSION_ID;
        case 201: return ERROR_NEXT_STATE_NOT_FOUND;
        case 202: return ERROR_SESSIONID_NULL;
        case 203: return ERROR_SESSION_ALREADY_START;
        case 204: return ERROR_SESSION_NOT_START;
        case 205: return ERROR_NO_SESSION_AVAILABLE;
        case 206: return ERROR_SESSIONID_FULL;
        case 207: return ERROR_SESSION_NAME_DUPLICATED;
        case 301: return ERROR_NO_DRAW_DATA;
        case 401: return ERROR_DICE_ALREADY_OPEN;
        case 402: return ERROR_USER_ALREADY_CALL_DICE;
        case 403: return ERROR_DICE_OPEN_SELF;
        case 451: return ERROR_CANNOT_BET;
        case 452: return ERROR_ALREADY_CHECK_CARD;
        case 453: return ERROR_CANNOT_CHECK_CARD;
        case 454: return ERROR_ALREADY_FOLD_CARD;
        case 455: return ERROR_CANNOT_FOLD_CARD;
        case 456: return ERROR_ALREADY_SHOW_CARD;
        case 457: return ERROR_CANNOT_SHOW_CARD;
        case 458: return ERROR_ALREADY_COMPARE_CARD;
        case 459: return ERROR_CANNOT_COMPARE_CARD;
        case 460: return ERROR_EXCESS_CHAHGE_QUOTA;
        case 501: return ERROR_UNKNOWN_ITEM;
        case 502: return ERROR_EXCESS_TIME_LIMIT;
        case 910: return ERROR_SYSTEM_HANDLER_NOT_FOUND;
        case 911: return ERROR_SYSTEM_EXCEPTION;
        case 912: return ERROR_SYSTEM_SECURITY_CHECK;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameResultCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameResultCode>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameResultCode>() {
            public GameResultCode findValueByNumber(int number) {
              return GameResultCode.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final GameResultCode[] VALUES = {
      SUCCESS, ERROR_JOIN_GAME, ERROR_USERID_NULL, ERROR_USER_CANNOT_START_GAME, ERROR_USER_NOT_IN_SESSION, ERROR_USER_NOT_CURRENT_PLAY_USER, ERROR_CURRENT_PLAY_USER_NULL, ERROR_NO_SESSION_ID, ERROR_NEXT_STATE_NOT_FOUND, ERROR_SESSIONID_NULL, ERROR_SESSION_ALREADY_START, ERROR_SESSION_NOT_START, ERROR_NO_SESSION_AVAILABLE, ERROR_SESSIONID_FULL, ERROR_SESSION_NAME_DUPLICATED, ERROR_NO_DRAW_DATA, ERROR_DICE_ALREADY_OPEN, ERROR_USER_ALREADY_CALL_DICE, ERROR_DICE_OPEN_SELF, ERROR_CANNOT_BET, ERROR_ALREADY_CHECK_CARD, ERROR_CANNOT_CHECK_CARD, ERROR_ALREADY_FOLD_CARD, ERROR_CANNOT_FOLD_CARD, ERROR_ALREADY_SHOW_CARD, ERROR_CANNOT_SHOW_CARD, ERROR_ALREADY_COMPARE_CARD, ERROR_CANNOT_COMPARE_CARD, ERROR_ALREADY_CHANGE_CARD_THIS_ROUND, ERROR_EXCESS_CHAHGE_QUOTA, ERROR_UNKNOWN_ITEM, ERROR_EXCESS_TIME_LIMIT, ERROR_SYSTEM_HANDLER_NOT_FOUND, ERROR_SYSTEM_EXCEPTION, ERROR_SYSTEM_SECURITY_CHECK, 
    };
    
    public static GameResultCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private GameResultCode(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.GameResultCode)
  }
  
  public enum GameCompleteReason
      implements com.google.protobuf.ProtocolMessageEnum {
    REASON_NOT_COMPLETE(0, 0),
    REASON_ALL_USER_GUESS(1, 1),
    REASON_ALL_USER_QUIT(2, 11),
    REASON_DRAW_USER_QUIT(3, 12),
    REASON_ONLY_ONE_USER(4, 13),
    REASON_EXPIRED(5, 21),
    ;
    
    public static final int REASON_NOT_COMPLETE_VALUE = 0;
    public static final int REASON_ALL_USER_GUESS_VALUE = 1;
    public static final int REASON_ALL_USER_QUIT_VALUE = 11;
    public static final int REASON_DRAW_USER_QUIT_VALUE = 12;
    public static final int REASON_ONLY_ONE_USER_VALUE = 13;
    public static final int REASON_EXPIRED_VALUE = 21;
    
    
    public final int getNumber() { return value; }
    
    public static GameCompleteReason valueOf(int value) {
      switch (value) {
        case 0: return REASON_NOT_COMPLETE;
        case 1: return REASON_ALL_USER_GUESS;
        case 11: return REASON_ALL_USER_QUIT;
        case 12: return REASON_DRAW_USER_QUIT;
        case 13: return REASON_ONLY_ONE_USER;
        case 21: return REASON_EXPIRED;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameCompleteReason>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameCompleteReason>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameCompleteReason>() {
            public GameCompleteReason findValueByNumber(int number) {
              return GameCompleteReason.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final GameCompleteReason[] VALUES = {
      REASON_NOT_COMPLETE, REASON_ALL_USER_GUESS, REASON_ALL_USER_QUIT, REASON_DRAW_USER_QUIT, REASON_ONLY_ONE_USER, REASON_EXPIRED, 
    };
    
    public static GameCompleteReason valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private GameCompleteReason(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.GameCompleteReason)
  }
  
  public enum GameChatType
      implements com.google.protobuf.ProtocolMessageEnum {
    CHAT_GROUP(0, 0),
    CHAT_PRIVATE(1, 1),
    ;
    
    public static final int CHAT_GROUP_VALUE = 0;
    public static final int CHAT_PRIVATE_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static GameChatType valueOf(int value) {
      switch (value) {
        case 0: return CHAT_GROUP;
        case 1: return CHAT_PRIVATE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameChatType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameChatType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameChatType>() {
            public GameChatType findValueByNumber(int number) {
              return GameChatType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final GameChatType[] VALUES = {
      CHAT_GROUP, CHAT_PRIVATE, 
    };
    
    public static GameChatType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private GameChatType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.GameChatType)
  }
  
  public enum DiceGameRuleType
      implements com.google.protobuf.ProtocolMessageEnum {
    RULE_NORMAL(0, 0),
    RULE_HIGH(1, 1),
    RULE_SUPER_HIGH(2, 2),
    ;
    
    public static final int RULE_NORMAL_VALUE = 0;
    public static final int RULE_HIGH_VALUE = 1;
    public static final int RULE_SUPER_HIGH_VALUE = 2;
    
    
    public final int getNumber() { return value; }
    
    public static DiceGameRuleType valueOf(int value) {
      switch (value) {
        case 0: return RULE_NORMAL;
        case 1: return RULE_HIGH;
        case 2: return RULE_SUPER_HIGH;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<DiceGameRuleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DiceGameRuleType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DiceGameRuleType>() {
            public DiceGameRuleType findValueByNumber(int number) {
              return DiceGameRuleType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(4);
    }
    
    private static final DiceGameRuleType[] VALUES = {
      RULE_NORMAL, RULE_HIGH, RULE_SUPER_HIGH, 
    };
    
    public static DiceGameRuleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private DiceGameRuleType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.DiceGameRuleType)
  }
  
  public enum PBWordType
      implements com.google.protobuf.ProtocolMessageEnum {
    SYSTEM(0, 1),
    CUSTOM(1, 2),
    HOT(2, 3),
    ;
    
    public static final int SYSTEM_VALUE = 1;
    public static final int CUSTOM_VALUE = 2;
    public static final int HOT_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static PBWordType valueOf(int value) {
      switch (value) {
        case 1: return SYSTEM;
        case 2: return CUSTOM;
        case 3: return HOT;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<PBWordType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PBWordType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PBWordType>() {
            public PBWordType findValueByNumber(int number) {
              return PBWordType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(5);
    }
    
    private static final PBWordType[] VALUES = {
      SYSTEM, CUSTOM, HOT, 
    };
    
    public static PBWordType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private PBWordType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.PBWordType)
  }
  
  public enum PBWallType
      implements com.google.protobuf.ProtocolMessageEnum {
    Opuses(0, 1),
    ;
    
    public static final int Opuses_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static PBWallType valueOf(int value) {
      switch (value) {
        case 1: return Opuses;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<PBWallType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PBWallType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PBWallType>() {
            public PBWallType findValueByNumber(int number) {
              return PBWallType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.orange.network.game.protocol.constants.GameConstantsProtos.getDescriptor().getEnumTypes().get(6);
    }
    
    private static final PBWallType[] VALUES = {
      Opuses, 
    };
    
    public static PBWallType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private PBWallType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:game.PBWallType)
  }
  
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023GameConstants.proto\022\004game*\221\031\n\017GameComm" +
      "andType\022\025\n\021JOIN_GAME_REQUEST\020\001\022\026\n\022JOIN_G" +
      "AME_RESPONSE\020\002\022\026\n\022START_GAME_REQUEST\020\003\022\027" +
      "\n\023START_GAME_RESPONSE\020\004\022\025\n\021QUIT_GAME_REQ" +
      "UEST\020\005\022\026\n\022QUIT_GAME_RESPONSE\020\006\022\032\n\026SEND_D" +
      "RAW_DATA_REQUEST\020\013\022\033\n\027SEND_DRAW_DATA_RES" +
      "PONSE\020\014\022\026\n\022CLEAN_DRAW_REQUEST\020\r\022\027\n\023CLEAN" +
      "_DRAW_RESPONSE\020\016\022\020\n\014CHAT_REQUEST\020\017\022\021\n\rCH" +
      "AT_RESPONSE\020\020\022\031\n\025COMPLETE_GAME_REQUEST\020\021" +
      "\022\032\n\026COMPLETE_GAME_RESPONSE\020\022\022\033\n\027FORCE_US",
      "ER_QUIT_REQUEST\020\023\022\034\n\030FORCE_USER_QUIT_RES" +
      "PONSE\020\024\022\031\n\025FACETIME_CHAT_REQUEST\020Q\022\032\n\026FA" +
      "CETIME_CHAT_RESPONSE\020R\022\027\n\023FACETIME_CHAT_" +
      "START\020S\022\026\n\022KEEP_ALIVE_REQUEST\020[\022\027\n\023KEEP_" +
      "ALIVE_RESPONSE\020\\\022\026\n\021GET_ROOMS_REQUEST\020\331\004" +
      "\022\027\n\022GET_ROOMS_RESPONSE\020\332\004\022\030\n\023CREATE_ROOM" +
      "_REQUEST\020\333\004\022\031\n\024CREATE_ROOM_RESPONSE\020\334\004\022\027" +
      "\n\022ENTER_ROOM_REQUEST\020\335\004\022\030\n\023ENTER_ROOM_RE" +
      "SPONSE\020\336\004\022(\n#REGISTER_ROOMS_NOTIFICATION" +
      "_REQUEST\020\337\004\022)\n$REGISTER_ROOMS_NOTIFICATI",
      "ON_RESPONSE\020\340\004\022*\n%UNREGISTER_ROOMS_NOTIF" +
      "ICATION_REQUEST\020\341\004\022+\n&UNREGISTER_ROOMS_N" +
      "OTIFICATION_RESPONSE\020\342\004\022\030\n\023SERACH_ROOM_R" +
      "EQUEST\020\343\004\022\031\n\024SEARCH_ROOM_RESPONSE\020\344\004\022\026\n\021" +
      "CALL_DICE_REQUEST\020\355\004\022\027\n\022CALL_DICE_RESPON" +
      "SE\020\356\004\022\026\n\021OPEN_DICE_REQUEST\020\357\004\022\027\n\022OPEN_DI" +
      "CE_RESPONSE\020\360\004\022\025\n\020BET_DICE_REQUEST\020\361\004\022\026\n" +
      "\021BET_DICE_RESPONSE\020\362\004\022\025\n\020USE_ITEM_REQUES" +
      "T\020\367\004\022\026\n\021USE_ITEM_RESPONSE\020\370\004\022\020\n\013BET_REQU" +
      "EST\020\241\006\022\021\n\014BET_RESPONSE\020\242\006\022\027\n\022CHECK_CARD_",
      "REQUEST\020\243\006\022\030\n\023CHECK_CARD_RESPONSE\020\244\006\022\026\n\021" +
      "FOLD_CARD_REQUEST\020\247\006\022\027\n\022FOLD_CARD_RESPON" +
      "SE\020\250\006\022\026\n\021SHOW_CARD_REQUEST\020\251\006\022\027\n\022SHOW_CA" +
      "RD_RESPONSE\020\252\006\022\031\n\024COMPARE_CARD_REQUEST\020\253" +
      "\006\022\032\n\025COMPARE_CARD_RESPONSE\020\254\006\022\030\n\023CHANGE_" +
      "CARD_REQUEST\020\255\006\022\031\n\024CHANGE_CARD_RESPONSE\020" +
      "\256\006\022\034\n\027TIMEOUT_SETTING_REQUEST\020\257\006\022\035\n\030TIME" +
      "OUT_SETTING_RESPONSE\020\260\006\022\"\n\036USER_JOIN_NOT" +
      "IFICATION_REQUEST\0203\022#\n\037USER_JOIN_NOTIFIC" +
      "ATION_RESPONSE\0204\022\"\n\036USER_QUIT_NOTIFICATI",
      "ON_REQUEST\0205\022#\n\037USER_QUIT_NOTIFICATION_R" +
      "ESPONSE\0206\022#\n\037GAME_START_NOTIFICATION_REQ" +
      "UEST\0207\022$\n GAME_START_NOTIFICATION_RESPON" +
      "SE\0208\022$\n HOST_CHANGE_NOTIFICATION_REQUEST" +
      "\020=\022%\n!HOST_CHANGE_NOTIFICATION_RESPONSE\020" +
      ">\022&\n\"NEW_DRAW_DATA_NOTIFICATION_REQUEST\020" +
      "G\022\'\n#NEW_DRAW_DATA_NOTIFICATION_RESPONSE" +
      "\020H\022#\n\037CLEAN_DRAW_NOTIFICATION_REQUEST\020I\022" +
      "$\n CLEAN_DRAW_NOTIFICATION_RESPONSE\020J\022\035\n" +
      "\031CHAT_NOTIFICATION_REQUEST\020K\022\036\n\032CHAT_NOT",
      "IFICATION_RESPONSE\020L\022+\n\'GAME_TURN_COMPLE" +
      "TE_NOTIFICATION_REQUEST\020M\022,\n(GAME_TURN_C" +
      "OMPLETE_NOTIFICATION_RESPONSE\020N\022\035\n\030LOCAL" +
      "_CHANNEL_DISCONNECT\020\311\001\022\026\n\021LOCAL_FINISH_G" +
      "AME\020\313\001\022\024\n\017LOCAL_JOIN_GAME\020\314\001\022\035\n\030LOCAL_GA" +
      "ME_TURN_COMPLETE\020\315\001\022\030\n\023LOCAL_USER_TIME_O" +
      "UT\020\316\001\022\030\n\023LOCAL_NEW_USER_JOIN\020\255\002\022\024\n\017LOCAL" +
      "_USER_QUIT\020\256\002\022\031\n\024LOCAL_DRAW_USER_QUIT\020\257\002" +
      "\022\036\n\031LOCAL_ALL_OTHER_USER_QUIT\020\260\002\022\032\n\025LOCA" +
      "L_OTHER_USER_QUIT\020\261\002\022\023\n\016LOCAL_TIME_OUT\020\262",
      "\002\022\025\n\020LOCAL_START_GAME\020\263\002\022\030\n\023LOCAL_ALL_US" +
      "ER_QUIT\020\264\002\022\031\n\024LOCAL_ALL_USER_GUESS\020\265\002\022\031\n" +
      "\024LOCAL_DRAW_USER_CHAT\020\266\002\022\031\n\024LOCAL_PLAY_U" +
      "SER_QUIT\020\267\002\022\024\n\017LOCAL_CALL_DICE\020\270\002\022\024\n\017LOC" +
      "AL_OPEN_DICE\020\271\002\022\024\n\017LOCAL_USER_SKIP\020\272\002\022\027\n" +
      "\022LOCAL_ALL_USER_BET\020\273\002\022\016\n\tLOCAL_BET\020\274\002\022\025" +
      "\n\020LOCAL_CHECK_CARD\020\275\002\022\024\n\017LOCAL_FOLD_CARD" +
      "\020\276\002\022\024\n\017LOCAL_SHOW_CARD\020\277\002\022\027\n\022LOCAL_COMPA" +
      "RE_CARD\020\300\002\022%\n LOCAL_NOT_CURRENT_TURN_FOL" +
      "D_CARD\020\301\002\022\026\n\021LOCAL_CHANGE_CARD\020\302\002\022\026\n\021LOC",
      "AL_WORD_PICKED\020\303\002\022\036\n\031ROOM_NOTIFICATION_R" +
      "EQUEST\020\275\005\022\037\n\032ROOM_NOTIFICATION_RESPONSE\020" +
      "\276\005\022)\n$ROLL_DICE_BEGIN_NOTIFICATION_REQUE" +
      "ST\020\307\005\022*\n%ROLL_DICE_BEGIN_NOTIFICATION_RE" +
      "SPONSE\020\310\005\022\'\n\"ROLL_DICE_END_NOTIFICATION_" +
      "REQUEST\020\311\005\022(\n#ROLL_DICE_END_NOTIFICATION" +
      "_RESPONSE\020\312\005\022+\n&NEXT_PLAYER_START_NOTIFI" +
      "CATION_REQUEST\020\313\005\022,\n\'NEXT_PLAYER_START_N" +
      "OTIFICATION_RESPONSE\020\314\005\022\033\n\026USER_DICE_NOT" +
      "IFICATION\020\315\005\022#\n\036GAME_OVER_NOTIFICATION_R",
      "EQUEST\020\333\005\022$\n\037GAME_OVER_NOTIFICATION_RESP" +
      "ONSE\020\334\005*\256\010\n\016GameResultCode\022\013\n\007SUCCESS\020\000\022" +
      "\023\n\017ERROR_JOIN_GAME\020\001\022\025\n\021ERROR_USERID_NUL" +
      "L\020d\022 \n\034ERROR_USER_CANNOT_START_GAME\020e\022\035\n" +
      "\031ERROR_USER_NOT_IN_SESSION\020f\022$\n ERROR_US" +
      "ER_NOT_CURRENT_PLAY_USER\020g\022 \n\034ERROR_CURR" +
      "ENT_PLAY_USER_NULL\020h\022\030\n\023ERROR_NO_SESSION" +
      "_ID\020\310\001\022\037\n\032ERROR_NEXT_STATE_NOT_FOUND\020\311\001\022" +
      "\031\n\024ERROR_SESSIONID_NULL\020\312\001\022 \n\033ERROR_SESS" +
      "ION_ALREADY_START\020\313\001\022\034\n\027ERROR_SESSION_NO",
      "T_START\020\314\001\022\037\n\032ERROR_NO_SESSION_AVAILABLE" +
      "\020\315\001\022\031\n\024ERROR_SESSIONID_FULL\020\316\001\022\"\n\035ERROR_" +
      "SESSION_NAME_DUPLICATED\020\317\001\022\027\n\022ERROR_NO_D" +
      "RAW_DATA\020\255\002\022\034\n\027ERROR_DICE_ALREADY_OPEN\020\221" +
      "\003\022!\n\034ERROR_USER_ALREADY_CALL_DICE\020\222\003\022\031\n\024" +
      "ERROR_DICE_OPEN_SELF\020\223\003\022\025\n\020ERROR_CANNOT_" +
      "BET\020\303\003\022\035\n\030ERROR_ALREADY_CHECK_CARD\020\304\003\022\034\n" +
      "\027ERROR_CANNOT_CHECK_CARD\020\305\003\022\034\n\027ERROR_ALR" +
      "EADY_FOLD_CARD\020\306\003\022\033\n\026ERROR_CANNOT_FOLD_C" +
      "ARD\020\307\003\022\034\n\027ERROR_ALREADY_SHOW_CARD\020\310\003\022\033\n\026",
      "ERROR_CANNOT_SHOW_CARD\020\311\003\022\037\n\032ERROR_ALREA" +
      "DY_COMPARE_CARD\020\312\003\022\036\n\031ERROR_CANNOT_COMPA" +
      "RE_CARD\020\313\003\022)\n$ERROR_ALREADY_CHANGE_CARD_" +
      "THIS_ROUND\020\312\003\022\036\n\031ERROR_EXCESS_CHAHGE_QUO" +
      "TA\020\314\003\022\027\n\022ERROR_UNKNOWN_ITEM\020\365\003\022\034\n\027ERROR_" +
      "EXCESS_TIME_LIMIT\020\366\003\022#\n\036ERROR_SYSTEM_HAN" +
      "DLER_NOT_FOUND\020\216\007\022\033\n\026ERROR_SYSTEM_EXCEPT" +
      "ION\020\217\007\022 \n\033ERROR_SYSTEM_SECURITY_CHECK\020\220\007" +
      "*\253\001\n\022GameCompleteReason\022\027\n\023REASON_NOT_CO" +
      "MPLETE\020\000\022\031\n\025REASON_ALL_USER_GUESS\020\001\022\030\n\024R",
      "EASON_ALL_USER_QUIT\020\013\022\031\n\025REASON_DRAW_USE" +
      "R_QUIT\020\014\022\030\n\024REASON_ONLY_ONE_USER\020\r\022\022\n\016RE" +
      "ASON_EXPIRED\020\025*0\n\014GameChatType\022\016\n\nCHAT_G" +
      "ROUP\020\000\022\020\n\014CHAT_PRIVATE\020\001*G\n\020DiceGameRule" +
      "Type\022\017\n\013RULE_NORMAL\020\000\022\r\n\tRULE_HIGH\020\001\022\023\n\017" +
      "RULE_SUPER_HIGH\020\002*-\n\nPBWordType\022\n\n\006SYSTE" +
      "M\020\001\022\n\n\006CUSTOM\020\002\022\007\n\003HOT\020\003*\030\n\nPBWallType\022\n" +
      "\n\006Opuses\020\001BA\n*com.orange.network.game.pr" +
      "otocol.constantsB\023GameConstantsProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
